[tool.poetry]
name = "xarray-ms"
version = "0.2.1"
description = "xarray MSv4 views over MSv2 Measurement Sets"
authors = ["Simon Perkins <simon.perkins@gmail.com>"]
readme = "README.rst"

[tool.poetry.dependencies]
python = "^3.10"
pytest = {version = "^8.0.0", optional = true, extras = ["testing"]}
xarray = "^2024.3.0"
dask = {version = "^2024.5.0", optional = true, extras = ["testing"]}
distributed = {version = "^2024.5.0", optional = true, extras = ["testing"]}
cacheout = "^0.16.0"
arcae = "^0.2.5"
typing-extensions = { version = "^4.12.2", python = "<3.11" }
zarr = {version = "^2.18.3", optional = true, extras = ["testing"]}

[tool.poetry.extras]
testing = ["dask", "distributed", "pytest", "zarr"]

[tool.poetry.plugins."xarray.backends"]
"xarray-ms:msv2" = "xarray_ms.backend.msv2.entrypoint:MSv2PartitionEntryPoint"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.8.0"
tbump = "^6.11.0"

[tool.poetry.group.doc]
optional = true

[tool.poetry.group.doc.dependencies]
sphinx = "^8.0.2"
pygments = "^2.18.0"
sphinx-copybutton = "^0.5.2"
pydata-sphinx-theme = "^0.15.4"
ipython = "^8.27.0"
dask = "^2024.9.0"
zarr = "^2.18.3"

[tool.ruff]
line-length = 88
indent-width = 2
target-version = "py311"

[tool.ruff.lint]
select = ["F", "E", "W", "I001"]
extend-select = ["I"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[tool.tbump.version]
current = "0.2.1"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "pyproject.toml"

[[tool.tbump.file]]
src = "doc/source/conf.py"

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

#  [[tool.tbump.before_commit]]
#  name = "check changelog"
#  cmd = "grep -q {new_version} Changelog.rst"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[tool.tbump.after_push]]
#  name = "publish"
#  cmd = "./publish.sh"
